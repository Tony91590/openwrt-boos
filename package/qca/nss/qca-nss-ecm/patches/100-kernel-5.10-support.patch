From 6b3a1a91778d8281abc5767612f2525744378fd0 Mon Sep 17 00:00:00 2001
From: Ansuel Smith <ansuelsmth@gmail.com>
Date: Sat, 15 May 2021 03:51:14 +0200
Subject: [PATCH] add support for kernel 5.10

Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
---
 ecm_classifier_default.c                | 24 +++---------
 ecm_classifier_dscp.c                   |  8 +---
 ecm_classifier_emesh.c                  | 16 ++------
 ecm_classifier_hyfi.c                   |  7 +---
 ecm_classifier_mark.c                   |  8 +---
 ecm_classifier_ovs.c                    |  8 +---
 ecm_classifier_pcc.c                    |  8 +---
 ecm_conntrack_notifier.c                |  8 +---
 ecm_db/ecm_db_connection.c              |  7 +---
 ecm_db/ecm_db_host.c                    |  7 +---
 ecm_db/ecm_db_iface.c                   |  7 +---
 ecm_db/ecm_db_mapping.c                 |  7 +---
 ecm_db/ecm_db_node.c                    |  7 +---
 ecm_interface.c                         |  4 +-
 ecm_state.c                             | 14 ++-----
 frontends/ecm_front_end_common.c        |  4 +-
 frontends/ecm_front_end_ipv4.c          |  7 +---
 frontends/ecm_front_end_ipv6.c          |  7 +---
 frontends/nss/ecm_nss_bond_notifier.c   |  8 +---
 frontends/nss/ecm_nss_ipv4.c            | 49 +++++++------------------
 frontends/nss/ecm_nss_ipv6.c            | 49 +++++++------------------
 frontends/nss/ecm_nss_multicast_ipv4.c  |  7 +---
 frontends/nss/ecm_nss_multicast_ipv6.c  |  7 +---
 frontends/nss/ecm_nss_non_ported_ipv4.c |  7 +---
 frontends/nss/ecm_nss_non_ported_ipv6.c |  7 +---
 frontends/nss/ecm_nss_ported_ipv4.c     |  8 +---
 frontends/nss/ecm_nss_ported_ipv6.c     |  8 +---
 frontends/sfe/ecm_sfe_ipv4.c            | 49 +++++++------------------
 frontends/sfe/ecm_sfe_ipv6.c            | 49 +++++++------------------
 frontends/sfe/ecm_sfe_non_ported_ipv4.c |  7 +---
 frontends/sfe/ecm_sfe_non_ported_ipv6.c |  7 +---
 frontends/sfe/ecm_sfe_ported_ipv4.c     |  8 +---
 frontends/sfe/ecm_sfe_ported_ipv6.c     |  8 +---
 33 files changed, 122 insertions(+), 314 deletions(-)

diff --git a/ecm_classifier_default.c b/ecm_classifier_default.c
index 863f49b..f7a0572 100644
--- a/ecm_classifier_default.c
+++ b/ecm_classifier_default.c
@@ -776,26 +776,14 @@ int ecm_classifier_default_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_default_dentry,
-					(u32 *)&ecm_classifier_default_enabled)) {
-		DEBUG_ERROR("Failed to create ecm deafult classifier enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_default_dentry);
-		return -1;
-	}
+	debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_default_dentry,
+					(u32 *)&ecm_classifier_default_enabled);

-	if (!debugfs_create_u32("accel_mode", S_IRUGO | S_IWUSR, ecm_classifier_default_dentry,
-					(u32 *)&ecm_classifier_default_accel_mode)) {
-		DEBUG_ERROR("Failed to create ecm deafult classifier accel_mode file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_default_dentry);
-		return -1;
-	}
+	debugfs_create_u32("accel_mode", S_IRUGO | S_IWUSR, ecm_classifier_default_dentry,
+					(u32 *)&ecm_classifier_default_accel_mode);

-	if (!debugfs_create_u32("accel_delay_pkts", S_IRUGO | S_IWUSR, ecm_classifier_default_dentry,
-					(u32 *)&ecm_classifier_accel_delay_pkts)) {
-		DEBUG_ERROR("Failed to create accel delay packet counts in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_default_dentry);
-		return -1;
-	}
+	debugfs_create_u32("accel_delay_pkts", S_IRUGO | S_IWUSR, ecm_classifier_default_dentry,
+					(u32 *)&ecm_classifier_accel_delay_pkts);

 	return 0;
 }
diff --git a/ecm_classifier_dscp.c b/ecm_classifier_dscp.c
index 8516921..ca517ff 100644
--- a/ecm_classifier_dscp.c
+++ b/ecm_classifier_dscp.c
@@ -747,12 +747,8 @@ int ecm_classifier_dscp_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_dscp_dentry,
-					(u32 *)&ecm_classifier_dscp_enabled)) {
-		DEBUG_ERROR("Failed to create dscp enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_dscp_dentry);
-		return -1;
-	}
+	debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_dscp_dentry,
+					(u32 *)&ecm_classifier_dscp_enabled);

 	return 0;
 }
diff --git a/ecm_classifier_emesh.c b/ecm_classifier_emesh.c
index 0823d6f..a425c97 100644
--- a/ecm_classifier_emesh.c
+++ b/ecm_classifier_emesh.c
@@ -977,19 +977,11 @@ int ecm_classifier_emesh_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_emesh_dentry,
-				(u32 *)&ecm_classifier_emesh_enabled)) {
-		DEBUG_ERROR("Failed to create ecm emesh classifier enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_emesh_dentry);
-		return -1;
-	}
+	debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_emesh_dentry,
+				(u32 *)&ecm_classifier_emesh_enabled);

-	if (!debugfs_create_u32("latency_config_enabled", S_IRUGO | S_IWUSR, ecm_classifier_emesh_dentry,
-				(u32 *)&ecm_classifier_emesh_latency_config_enabled)) {
-		DEBUG_ERROR("Failed to create ecm emesh classifier latency config enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_emesh_dentry);
-		return -1;
-	}
+	debugfs_create_u32("latency_config_enabled", S_IRUGO | S_IWUSR, ecm_classifier_emesh_dentry,
+				(u32 *)&ecm_classifier_emesh_latency_config_enabled);

 	/*
 	 * Register for service prioritization notification update.
diff --git a/ecm_classifier_hyfi.c b/ecm_classifier_hyfi.c
index a73e866..277d38c 100644
--- a/ecm_classifier_hyfi.c
+++ b/ecm_classifier_hyfi.c
@@ -1099,11 +1099,8 @@ int ecm_classifier_hyfi_rules_init(struct dentry *dentry)
 		goto classifier_task_cleanup;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_hyfi_dentry,
-					(u32 *)&ecm_classifier_hyfi_enabled)) {
-		DEBUG_ERROR("Failed to create ecm hyfi classifier enabled file in debugfs\n");
-		goto classifier_task_cleanup;
-	}
+	debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_hyfi_dentry,
+					(u32 *)&ecm_classifier_hyfi_enabled);

 	if (!debugfs_create_file("cmd", S_IWUSR, ecm_classifier_hyfi_dentry,
 					NULL, &ecm_classifier_hyfi_cmd_fops)) {
diff --git a/ecm_classifier_mark.c b/ecm_classifier_mark.c
index bfee2cc..b311e8b 100644
--- a/ecm_classifier_mark.c
+++ b/ecm_classifier_mark.c
@@ -753,12 +753,8 @@ int ecm_classifier_mark_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_mark_dentry,
-					(u32 *)&ecm_classifier_mark_enabled)) {
-		DEBUG_ERROR("Failed to create mark enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_mark_dentry);
-		return -1;
-	}
+	debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_mark_dentry,
+					(u32 *)&ecm_classifier_mark_enabled);

 	return 0;
 }
diff --git a/ecm_classifier_ovs.c b/ecm_classifier_ovs.c
index e41b392..69679f0 100644
--- a/ecm_classifier_ovs.c
+++ b/ecm_classifier_ovs.c
@@ -2200,12 +2200,8 @@ int ecm_classifier_ovs_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_ovs_dentry,
-					(u32 *)&ecm_classifier_ovs_enabled)) {
-		DEBUG_ERROR("Failed to create ovs enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_ovs_dentry);
-		return -1;
-	}
+	debugfs_create_u32("enabled", S_IRUGO | S_IWUSR, ecm_classifier_ovs_dentry,
+					(u32 *)&ecm_classifier_ovs_enabled);

 	return 0;
 }
diff --git a/ecm_classifier_pcc.c b/ecm_classifier_pcc.c
index 1d054b9..2474c38 100644
--- a/ecm_classifier_pcc.c
+++ b/ecm_classifier_pcc.c
@@ -1308,12 +1308,8 @@ int ecm_classifier_pcc_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("enabled", S_IRUGO, ecm_classifier_pcc_dentry,
-					(u32 *)&ecm_classifier_pcc_enabled)) {
-		DEBUG_ERROR("Failed to create pcc enabled file in debugfs\n");
-		debugfs_remove_recursive(ecm_classifier_pcc_dentry);
-		return -1;
-	}
+	debugfs_create_u32("enabled", S_IRUGO, ecm_classifier_pcc_dentry,
+					(u32 *)&ecm_classifier_pcc_enabled);

 	return 0;
 }
diff --git a/ecm_conntrack_notifier.c b/ecm_conntrack_notifier.c
index ad6c4d0..83669e5 100644
--- a/ecm_conntrack_notifier.c
+++ b/ecm_conntrack_notifier.c
@@ -414,12 +414,8 @@ int ecm_conntrack_notifier_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("stop", S_IRUGO | S_IWUSR, ecm_conntrack_notifier_dentry,
-					(u32 *)&ecm_conntrack_notifier_stopped)) {
-		DEBUG_ERROR("Failed to create ecm conntrack notifier stopped file in debugfs\n");
-		debugfs_remove_recursive(ecm_conntrack_notifier_dentry);
-		return -1;
-	}
+	debugfs_create_u32("stop", S_IRUGO | S_IWUSR, ecm_conntrack_notifier_dentry,
+					(u32 *)&ecm_conntrack_notifier_stopped);

 #ifdef CONFIG_NF_CONNTRACK_EVENTS
 	/*
diff --git a/ecm_db/ecm_db_connection.c b/ecm_db/ecm_db_connection.c
index b65078a..490a3f6 100644
--- a/ecm_db/ecm_db_connection.c
+++ b/ecm_db/ecm_db_connection.c
@@ -3642,11 +3642,8 @@ static struct file_operations ecm_db_connection_count_simple_fops = {
  */
 bool ecm_db_connection_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("connection_count", S_IRUGO, dentry,
-					(u32 *)&ecm_db_connection_count)) {
-		DEBUG_ERROR("Failed to create ecm db connection count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("connection_count", S_IRUGO, dentry,
+					(u32 *)&ecm_db_connection_count);

 	if (!debugfs_create_file("connection_count_simple", S_IRUGO, dentry,
 					NULL, &ecm_db_connection_count_simple_fops)) {
diff --git a/ecm_db/ecm_db_host.c b/ecm_db/ecm_db_host.c
index b788a4c..e28ae6a 100644
--- a/ecm_db/ecm_db_host.c
+++ b/ecm_db/ecm_db_host.c
@@ -770,11 +770,8 @@ EXPORT_SYMBOL(ecm_db_host_alloc);
 bool ecm_db_host_init(struct dentry *dentry)
 {

-	if (!debugfs_create_u32("host_count", S_IRUGO, dentry,
-					(u32 *)&ecm_db_host_count)) {
-		DEBUG_ERROR("Failed to create ecm db host count file in debugfs\n");
-		return false;;
-	}
+	debugfs_create_u32("host_count", S_IRUGO, dentry,
+					(u32 *)&ecm_db_host_count);

 	ecm_db_host_table = vzalloc(sizeof(struct ecm_db_host_instance *) * ECM_DB_HOST_HASH_SLOTS);
 	if (!ecm_db_host_table) {
diff --git a/ecm_db/ecm_db_iface.c b/ecm_db/ecm_db_iface.c
index 5ae31c1..d4f33ba 100644
--- a/ecm_db/ecm_db_iface.c
+++ b/ecm_db/ecm_db_iface.c
@@ -3670,11 +3670,8 @@ EXPORT_SYMBOL(ecm_db_iface_alloc);
  */
 bool ecm_db_iface_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("iface_count", S_IRUGO, dentry,
-					(u32 *)&ecm_db_iface_count)) {
-		DEBUG_ERROR("Failed to create ecm db iface count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("iface_count", S_IRUGO, dentry,
+					(u32 *)&ecm_db_iface_count);

 	return true;
 }
diff --git a/ecm_db/ecm_db_mapping.c b/ecm_db/ecm_db_mapping.c
index 05e87ec..07cbfbd 100644
--- a/ecm_db/ecm_db_mapping.c
+++ b/ecm_db/ecm_db_mapping.c
@@ -806,11 +806,8 @@ EXPORT_SYMBOL(ecm_db_mapping_alloc);
  */
 bool ecm_db_mapping_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("mapping_count", S_IRUGO, dentry,
-					(u32 *)&ecm_db_mapping_count)) {
-		DEBUG_ERROR("Failed to create ecm db mapping count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("mapping_count", S_IRUGO, dentry,
+					(u32 *)&ecm_db_mapping_count);

 	ecm_db_mapping_table = vzalloc(sizeof(struct ecm_db_mapping_instance *) * ECM_DB_MAPPING_HASH_SLOTS);
 	if (!ecm_db_mapping_table) {
diff --git a/ecm_db/ecm_db_node.c b/ecm_db/ecm_db_node.c
index 067c650..3350902 100644
--- a/ecm_db/ecm_db_node.c
+++ b/ecm_db/ecm_db_node.c
@@ -1187,11 +1187,8 @@ keep_sni_conn:
  */
 bool ecm_db_node_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("node_count", S_IRUGO, dentry,
-					(u32 *)&ecm_db_node_count)) {
-		DEBUG_ERROR("Failed to create ecm db node count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("node_count", S_IRUGO, dentry,
+					(u32 *)&ecm_db_node_count);

 	ecm_db_node_table = vzalloc(sizeof(struct ecm_db_node_instance *) * ECM_DB_NODE_HASH_SLOTS);
 	if (!ecm_db_node_table) {
diff --git a/ecm_interface.c b/ecm_interface.c
index f26d9ef..c5101b7 100644
--- a/ecm_interface.c
+++ b/ecm_interface.c
@@ -332,7 +332,7 @@ static struct net_device *ecm_interface_dev_find_by_local_addr_ipv6(ip_addr_t ad
 	struct net_device *dev;

 	ECM_IP_ADDR_TO_NIN6_ADDR(addr6, addr);
-	dev = (struct net_device *)ipv6_dev_find(&init_net, &addr6, 1);
+	dev = (struct net_device *)ipv6_dev_find_and_hold(&init_net, &addr6, 1);
 	return dev;
 }
 #endif
@@ -734,7 +734,7 @@ static bool ecm_interface_mac_addr_get_ipv6_no_route(struct net_device *dev, ip_
 	 * Get the MAC address that corresponds to IP address given.
 	 */
 	ECM_IP_ADDR_TO_NIN6_ADDR(daddr, addr);
-	local_dev = ipv6_dev_find(&init_net, &daddr, 1);
+	local_dev = ipv6_dev_find_and_hold(&init_net, &daddr, 1);
 	if (local_dev) {
 		DEBUG_TRACE("%pi6 is a local address\n", &daddr);
 		memcpy(mac_addr, dev->dev_addr, ETH_ALEN);
diff --git a/ecm_state.c b/ecm_state.c
index 6bc6d16..9dbe382 100644
--- a/ecm_state.c
+++ b/ecm_state.c
@@ -899,17 +899,11 @@ int ecm_state_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("state_dev_major", S_IRUGO, ecm_state_dentry,
-					(u32 *)&ecm_state_dev_major_id)) {
-		DEBUG_ERROR("Failed to create ecm state dev major file in debugfs\n");
-		goto init_cleanup;
-	}
+	debugfs_create_u32("state_dev_major", S_IRUGO, ecm_state_dentry,
+					(u32 *)&ecm_state_dev_major_id);

-	if (!debugfs_create_u32("state_file_output_mask", S_IRUGO | S_IWUSR, ecm_state_dentry,
-					(u32 *)&ecm_state_file_output_mask)) {
-		DEBUG_ERROR("Failed to create ecm state output mask file in debugfs\n");
-		goto init_cleanup;
-	}
+	debugfs_create_u32("state_file_output_mask", S_IRUGO | S_IWUSR, ecm_state_dentry,
+					(u32 *)&ecm_state_file_output_mask);

 	/*
 	 * Register a char device that we will use to provide a dump of our state
diff --git a/frontends/ecm_front_end_common.c b/frontends/ecm_front_end_common.c
index 8698e40..5995d1e 100644
--- a/frontends/ecm_front_end_common.c
+++ b/frontends/ecm_front_end_common.c
@@ -192,7 +192,7 @@ bool ecm_front_end_gre_proto_is_accel_allowed(struct net_device *indev,
 			return false;
 		}
 	} else {
-		dev = ipv6_dev_find(&init_net, &(tuple->src.u3.in6), 1);
+		dev = ipv6_dev_find_and_hold(&init_net, &(tuple->src.u3.in6), 1);
 		if (dev) {
 			/*
 			 * Source IP address is local
@@ -202,7 +202,7 @@ bool ecm_front_end_gre_proto_is_accel_allowed(struct net_device *indev,
 			return false;
 		}

-		dev = ipv6_dev_find(&init_net, &(tuple->dst.u3.in6), 1);
+		dev = ipv6_dev_find_and_hold(&init_net, &(tuple->dst.u3.in6), 1);
 		if (dev) {
 			/*
 			 * Destination IP address is local
diff --git a/frontends/ecm_front_end_ipv4.c b/frontends/ecm_front_end_ipv4.c
index 786524a..103d3d1 100644
--- a/frontends/ecm_front_end_ipv4.c
+++ b/frontends/ecm_front_end_ipv4.c
@@ -376,11 +376,8 @@ void ecm_front_end_ipv4_stop(int num)
  */
 int ecm_front_end_ipv4_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("front_end_ipv4_stop", S_IRUGO | S_IWUSR, dentry,
-					(u32 *)&ecm_front_end_ipv4_stopped)) {
-		DEBUG_ERROR("Failed to create ecm front end ipv4 stop file in debugfs\n");
-		return -1;
-	}
+	debugfs_create_u32("front_end_ipv4_stop", S_IRUGO | S_IWUSR, dentry,
+			   (u32 *)&ecm_front_end_ipv4_stopped);

 	switch (ecm_front_end_type_get()) {
 	case ECM_FRONT_END_TYPE_NSS:
diff --git a/frontends/ecm_front_end_ipv6.c b/frontends/ecm_front_end_ipv6.c
index d0e652c..2e68be8 100644
--- a/frontends/ecm_front_end_ipv6.c
+++ b/frontends/ecm_front_end_ipv6.c
@@ -255,11 +255,8 @@ void ecm_front_end_ipv6_stop(int num)
  */
 int ecm_front_end_ipv6_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("front_end_ipv6_stop", S_IRUGO | S_IWUSR, dentry,
-					(u32 *)&ecm_front_end_ipv6_stopped)) {
-		DEBUG_ERROR("Failed to create ecm front end ipv6 stop file in debugfs\n");
-		return -1;
-	}
+	debugfs_create_u32("front_end_ipv6_stop", S_IRUGO | S_IWUSR, dentry,
+			   (u32 *)&ecm_front_end_ipv6_stopped);

 	switch (ecm_front_end_type_get()) {
 	case ECM_FRONT_END_TYPE_NSS:
diff --git a/frontends/nss/ecm_nss_bond_notifier.c b/frontends/nss/ecm_nss_bond_notifier.c
index 4e3bbfa..2b90550 100644
--- a/frontends/nss/ecm_nss_bond_notifier.c
+++ b/frontends/nss/ecm_nss_bond_notifier.c
@@ -240,12 +240,8 @@ int ecm_nss_bond_notifier_init(struct dentry *dentry)
 		return -1;
 	}

-	if (!debugfs_create_u32("stop", S_IRUGO | S_IWUSR, ecm_nss_bond_notifier_dentry,
-					(u32 *)&ecm_nss_bond_notifier_stopped)) {
-		DEBUG_ERROR("Failed to create ecm bond notifier stopped file in debugfs\n");
-		debugfs_remove_recursive(ecm_nss_bond_notifier_dentry);
-		return -1;
-	}
+	debugfs_create_u32("stop", S_IRUGO | S_IWUSR, ecm_nss_bond_notifier_dentry,
+					(u32 *)&ecm_nss_bond_notifier_stopped);

 	/*
 	 * Register Link Aggregation callbacks with the bonding driver
diff --git a/frontends/nss/ecm_nss_ipv4.c b/frontends/nss/ecm_nss_ipv4.c
index e00553c..6642d22 100644
--- a/frontends/nss/ecm_nss_ipv4.c
+++ b/frontends/nss/ecm_nss_ipv4.c
@@ -2802,41 +2802,23 @@ int ecm_nss_ipv4_init(struct dentry *dentry)
 		return result;
 	}

-	if (!debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_no_action_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 no_action_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_no_action_limit_default);

-	if (!debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_driver_fail_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 driver_fail_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_driver_fail_limit_default);

-	if (!debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_nack_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 nack_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_nack_limit_default);

-	if (!debugfs_create_u32("accelerated_count", S_IRUGO, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 accelerated_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("accelerated_count", S_IRUGO, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_accelerated_count);

-	if (!debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_pending_accel_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 pending_accel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_pending_accel_count);

-	if (!debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_pending_decel_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 pending_decel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_pending_decel_count);

 	if (!debugfs_create_file("accel_limit_mode", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
 					NULL, &ecm_nss_ipv4_accel_limit_mode_fops)) {
@@ -2867,11 +2849,8 @@ int ecm_nss_ipv4_init(struct dentry *dentry)
 		goto task_cleanup;
 	}

-	if (!debugfs_create_u32("vlan_passthrough_set", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
-					(u32 *)&ecm_nss_ipv4_vlan_passthrough_enable)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 vlan passthrough file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("vlan_passthrough_set", S_IRUGO | S_IWUSR, ecm_nss_ipv4_dentry,
+					(u32 *)&ecm_nss_ipv4_vlan_passthrough_enable);

 #ifdef ECM_NON_PORTED_SUPPORT_ENABLE
 	if (!ecm_nss_non_ported_ipv4_debugfs_init(ecm_nss_ipv4_dentry)) {
diff --git a/frontends/nss/ecm_nss_ipv6.c b/frontends/nss/ecm_nss_ipv6.c
index 82e739f..4ce3b08 100644
--- a/frontends/nss/ecm_nss_ipv6.c
+++ b/frontends/nss/ecm_nss_ipv6.c
@@ -2542,41 +2542,23 @@ int ecm_nss_ipv6_init(struct dentry *dentry)
 		return result;
 	}

-	if (!debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_no_action_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 no_action_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_no_action_limit_default);

-	if (!debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_driver_fail_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 driver_fail_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_driver_fail_limit_default);

-	if (!debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_nack_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 nack_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_nack_limit_default);

-	if (!debugfs_create_u32("accelerated_count", S_IRUGO, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 accelerated_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("accelerated_count", S_IRUGO, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_accelerated_count);

-	if (!debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_pending_accel_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 pending_accel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_pending_accel_count);

-	if (!debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_pending_decel_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 pending_decel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_pending_decel_count);

 	if (!debugfs_create_file("accel_limit_mode", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
 					NULL, &ecm_nss_ipv6_accel_limit_mode_fops)) {
@@ -2607,11 +2589,8 @@ int ecm_nss_ipv6_init(struct dentry *dentry)
 		goto task_cleanup;
 	}

-	if (!debugfs_create_u32("vlan_passthrough_set", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
-					(u32 *)&ecm_nss_ipv6_vlan_passthrough_enable)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 vlan passthrough file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("vlan_passthrough_set", S_IRUGO | S_IWUSR, ecm_nss_ipv6_dentry,
+					(u32 *)&ecm_nss_ipv6_vlan_passthrough_enable);

 #ifdef ECM_NON_PORTED_SUPPORT_ENABLE
 	if (!ecm_nss_non_ported_ipv6_debugfs_init(ecm_nss_ipv6_dentry)) {
diff --git a/frontends/nss/ecm_nss_multicast_ipv4.c b/frontends/nss/ecm_nss_multicast_ipv4.c
index 35eb416..f4b2ed1 100644
--- a/frontends/nss/ecm_nss_multicast_ipv4.c
+++ b/frontends/nss/ecm_nss_multicast_ipv4.c
@@ -4139,11 +4139,8 @@ void ecm_nss_multicast_ipv4_stop(int num)
  */
 int ecm_nss_multicast_ipv4_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("ecm_nss_multicast_ipv4_stop", S_IRUGO | S_IWUSR, dentry,
-					(u32 *)&ecm_front_end_ipv4_mc_stopped)) {
-		DEBUG_ERROR("Failed to create ecm front end ipv4 mc stop file in debugfs\n");
-		return -1;
-	}
+	debugfs_create_u32("ecm_nss_multicast_ipv4_stop", S_IRUGO | S_IWUSR, dentry,
+					(u32 *)&ecm_front_end_ipv4_mc_stopped);

 	/*
 	 * Register multicast update callback to MCS snooper
diff --git a/frontends/nss/ecm_nss_multicast_ipv6.c b/frontends/nss/ecm_nss_multicast_ipv6.c
index 522d09e..a85fb00 100644
--- a/frontends/nss/ecm_nss_multicast_ipv6.c
+++ b/frontends/nss/ecm_nss_multicast_ipv6.c
@@ -3939,11 +3939,8 @@ void ecm_nss_multicast_ipv6_stop(int num)
  */
 int ecm_nss_multicast_ipv6_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("ecm_nss_multicast_ipv6_stop", S_IRUGO | S_IWUSR, dentry,
-					(u32 *)&ecm_front_end_ipv6_mc_stopped)) {
-		DEBUG_ERROR("Failed to create ecm front end ipv6 mc stop file in debugfs\n");
-		return -1;
-	}
+	debugfs_create_u32("ecm_nss_multicast_ipv6_stop", S_IRUGO | S_IWUSR, dentry,
+					(u32 *)&ecm_front_end_ipv6_mc_stopped);

 	/*
 	 * Register multicast update callback to MCS snooper
diff --git a/frontends/nss/ecm_nss_non_ported_ipv4.c b/frontends/nss/ecm_nss_non_ported_ipv4.c
index 4828e55..01c4c1c 100644
--- a/frontends/nss/ecm_nss_non_ported_ipv4.c
+++ b/frontends/nss/ecm_nss_non_ported_ipv4.c
@@ -2615,11 +2615,8 @@ done:
  */
 bool ecm_nss_non_ported_ipv4_debugfs_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
-					(u32 *)&ecm_nss_non_ported_ipv4_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 non_ported_accelerated_count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
+					(u32 *)&ecm_nss_non_ported_ipv4_accelerated_count);

 	return true;
 }
diff --git a/frontends/nss/ecm_nss_non_ported_ipv6.c b/frontends/nss/ecm_nss_non_ported_ipv6.c
index 1273535..2ff67cb 100644
--- a/frontends/nss/ecm_nss_non_ported_ipv6.c
+++ b/frontends/nss/ecm_nss_non_ported_ipv6.c
@@ -2329,11 +2329,8 @@ done:
  */
 bool ecm_nss_non_ported_ipv6_debugfs_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
-					(u32 *)&ecm_nss_non_ported_ipv6_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 non_ported_accelerated_count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
+					(u32 *)&ecm_nss_non_ported_ipv6_accelerated_count);

 	return true;
 }
diff --git a/frontends/nss/ecm_nss_ported_ipv4.c b/frontends/nss/ecm_nss_ported_ipv4.c
index 2028f39..3522f0f 100644
--- a/frontends/nss/ecm_nss_ported_ipv4.c
+++ b/frontends/nss/ecm_nss_ported_ipv4.c
@@ -2944,12 +2944,8 @@ bool ecm_nss_ported_ipv4_debugfs_init(struct dentry *dentry)
 		return false;
 	}

-	if (!debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
-					&ecm_nss_ported_ipv4_accelerated_count[ECM_NSS_PORTED_IPV4_PROTO_TCP])) {
-		DEBUG_ERROR("Failed to create ecm nss ipv4 tcp_accelerated_count file in debugfs\n");
-		debugfs_remove(udp_dentry);
-		return false;
-	}
+	debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
+					&ecm_nss_ported_ipv4_accelerated_count[ECM_NSS_PORTED_IPV4_PROTO_TCP]);

 	return true;
 }
diff --git a/frontends/nss/ecm_nss_ported_ipv6.c b/frontends/nss/ecm_nss_ported_ipv6.c
index 1a57bf5..f43ac95 100644
--- a/frontends/nss/ecm_nss_ported_ipv6.c
+++ b/frontends/nss/ecm_nss_ported_ipv6.c
@@ -2732,12 +2732,8 @@ bool ecm_nss_ported_ipv6_debugfs_init(struct dentry *dentry)
 		return false;
 	}

-	if (!debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
-					&ecm_nss_ported_ipv6_accelerated_count[ECM_NSS_PORTED_IPV6_PROTO_TCP])) {
-		DEBUG_ERROR("Failed to create ecm nss ipv6 tcp_accelerated_count file in debugfs\n");
-		debugfs_remove(udp_dentry);
-		return false;
-	}
+	debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
+					&ecm_nss_ported_ipv6_accelerated_count[ECM_NSS_PORTED_IPV6_PROTO_TCP]);

 	return true;
 }
diff --git a/frontends/sfe/ecm_sfe_ipv4.c b/frontends/sfe/ecm_sfe_ipv4.c
index 1bc09b7..9087406 100644
--- a/frontends/sfe/ecm_sfe_ipv4.c
+++ b/frontends/sfe/ecm_sfe_ipv4.c
@@ -1808,48 +1808,27 @@ int ecm_sfe_ipv4_init(struct dentry *dentry)
 	}

 #ifdef CONFIG_XFRM
-	if (!debugfs_create_u32("reject_acceleration_for_ipsec", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_reject_acceleration_for_ipsec)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 reject_acceleration_for_ipsec file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("reject_acceleration_for_ipsec", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_reject_acceleration_for_ipsec);
 #endif

-	if (!debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_no_action_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 no_action_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_no_action_limit_default);

-	if (!debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_driver_fail_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 driver_fail_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_driver_fail_limit_default);

-	if (!debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_nack_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 nack_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_nack_limit_default);

-	if (!debugfs_create_u32("accelerated_count", S_IRUGO, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 accelerated_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("accelerated_count", S_IRUGO, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_accelerated_count);

-	if (!debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_pending_accel_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 pending_accel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_pending_accel_count);

-	if (!debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_sfe_ipv4_dentry,
-					(u32 *)&ecm_sfe_ipv4_pending_decel_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 pending_decel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_sfe_ipv4_dentry,
+					(u32 *)&ecm_sfe_ipv4_pending_decel_count);

 	if (!debugfs_create_file("accel_limit_mode", S_IRUGO | S_IWUSR, ecm_sfe_ipv4_dentry,
 					NULL, &ecm_sfe_ipv4_accel_limit_mode_fops)) {
diff --git a/frontends/sfe/ecm_sfe_ipv6.c b/frontends/sfe/ecm_sfe_ipv6.c
index 819de57..c4cf38f 100644
--- a/frontends/sfe/ecm_sfe_ipv6.c
+++ b/frontends/sfe/ecm_sfe_ipv6.c
@@ -1532,48 +1532,27 @@ int ecm_sfe_ipv6_init(struct dentry *dentry)
 	}

 #ifdef CONFIG_XFRM
-	if (!debugfs_create_u32("reject_acceleration_for_ipsec", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_reject_acceleration_for_ipsec)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 reject_acceleration_for_ipsec file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("reject_acceleration_for_ipsec", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_reject_acceleration_for_ipsec);
 #endif

-	if (!debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_no_action_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 no_action_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("no_action_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_no_action_limit_default);

-	if (!debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_driver_fail_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 driver_fail_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("driver_fail_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_driver_fail_limit_default);

-	if (!debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_nack_limit_default)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 nack_limit_default file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("nack_limit_default", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_nack_limit_default);

-	if (!debugfs_create_u32("accelerated_count", S_IRUGO, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 accelerated_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("accelerated_count", S_IRUGO, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_accelerated_count);

-	if (!debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_pending_accel_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 pending_accel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_accel_count", S_IRUGO, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_pending_accel_count);

-	if (!debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_sfe_ipv6_dentry,
-					(u32 *)&ecm_sfe_ipv6_pending_decel_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 pending_decel_count file in debugfs\n");
-		goto task_cleanup;
-	}
+	debugfs_create_u32("pending_decel_count", S_IRUGO, ecm_sfe_ipv6_dentry,
+					(u32 *)&ecm_sfe_ipv6_pending_decel_count);

 	if (!debugfs_create_file("accel_limit_mode", S_IRUGO | S_IWUSR, ecm_sfe_ipv6_dentry,
 					NULL, &ecm_sfe_ipv6_accel_limit_mode_fops)) {
diff --git a/frontends/sfe/ecm_sfe_non_ported_ipv4.c b/frontends/sfe/ecm_sfe_non_ported_ipv4.c
index ebe23b1..1a7d84e 100644
--- a/frontends/sfe/ecm_sfe_non_ported_ipv4.c
+++ b/frontends/sfe/ecm_sfe_non_ported_ipv4.c
@@ -2284,11 +2284,8 @@ done:
  */
 bool ecm_sfe_non_ported_ipv4_debugfs_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
-					(u32 *)&ecm_sfe_non_ported_ipv4_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 non_ported_accelerated_count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
+					(u32 *)&ecm_sfe_non_ported_ipv4_accelerated_count);

 	return true;
 }
diff --git a/frontends/sfe/ecm_sfe_non_ported_ipv6.c b/frontends/sfe/ecm_sfe_non_ported_ipv6.c
index ef8fe4b..0021675 100644
--- a/frontends/sfe/ecm_sfe_non_ported_ipv6.c
+++ b/frontends/sfe/ecm_sfe_non_ported_ipv6.c
@@ -2083,11 +2083,8 @@ done:
  */
 bool ecm_sfe_non_ported_ipv6_debugfs_init(struct dentry *dentry)
 {
-	if (!debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
-					(u32 *)&ecm_sfe_non_ported_ipv6_accelerated_count)) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 non_ported_accelerated_count file in debugfs\n");
-		return false;
-	}
+	debugfs_create_u32("non_ported_accelerated_count", S_IRUGO, dentry,
+					(u32 *)&ecm_sfe_non_ported_ipv6_accelerated_count);

 	return true;
 }
diff --git a/frontends/sfe/ecm_sfe_ported_ipv4.c b/frontends/sfe/ecm_sfe_ported_ipv4.c
index ebb57b3..73eeadb 100644
--- a/frontends/sfe/ecm_sfe_ported_ipv4.c
+++ b/frontends/sfe/ecm_sfe_ported_ipv4.c
@@ -2528,12 +2528,8 @@ bool ecm_sfe_ported_ipv4_debugfs_init(struct dentry *dentry)
 		return false;
 	}

-	if (!debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
-					&ecm_sfe_ported_ipv4_accelerated_count[ECM_SFE_PORTED_IPV4_PROTO_TCP])) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv4 tcp_accelerated_count file in debugfs\n");
-		debugfs_remove(udp_dentry);
-		return false;
-	}
+	debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
+					&ecm_sfe_ported_ipv4_accelerated_count[ECM_SFE_PORTED_IPV4_PROTO_TCP]);

 	return true;
 }
diff --git a/frontends/sfe/ecm_sfe_ported_ipv6.c b/frontends/sfe/ecm_sfe_ported_ipv6.c
index bddedbe..1e11dbf 100644
--- a/frontends/sfe/ecm_sfe_ported_ipv6.c
+++ b/frontends/sfe/ecm_sfe_ported_ipv6.c
@@ -2374,12 +2374,8 @@ bool ecm_sfe_ported_ipv6_debugfs_init(struct dentry *dentry)
 		return false;
 	}

-	if (!debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
-					&ecm_sfe_ported_ipv6_accelerated_count[ECM_SFE_PORTED_IPV6_PROTO_TCP])) {
-		DEBUG_ERROR("Failed to create ecm sfe ipv6 tcp_accelerated_count file in debugfs\n");
-		debugfs_remove(udp_dentry);
-		return false;
-	}
+	debugfs_create_u32("tcp_accelerated_count", S_IRUGO, dentry,
+					&ecm_sfe_ported_ipv6_accelerated_count[ECM_SFE_PORTED_IPV6_PROTO_TCP]);

 	return true;
 }
--
2.35.1
